import org.apache.tools.ant.filters.ReplaceTokens

task updateDockerComposeFile {
	doLast {
		copy {
			from(projectDir) {
				if (project.hasProperty('prod') && prod) {
					include "docker-compose.prod.yml.template"
				} else {
					include "docker-compose.yml.template"
				}
			}
			into(projectDir)
			rename { fileName ->
				"docker-compose.yml"
			}

			ext.dockerImageName = project.hasProperty('dockerImageName') ? project.getProperty('dockerImageName') : rootProject.name
			ext.dockerImageTag = project.hasProperty('dockerImageTag') ? project.getProperty('dockerImageTag') : version

			filter(ReplaceTokens, tokens: [
					'DOCKER_IMAGE_NAME': dockerImageName,
					'DOCKER_TAG'       : dockerImageTag
			])
		}
	}
}

task dockerComposeUp() {
	doLast {
		exec {
			if (project.hasProperty('dockerComposeArgs')) {
				commandLine 'docker-compose', 'up', dockerComposeArgs
			} else {
				commandLine 'docker-compose', 'up', '-d'
			}
		}
	}
}

task buildDockerCompose {
	dependsOn 'hmc-app:bootBuildImage'
	dependsOn updateDockerComposeFile
}

task dockerComposeDown() {
	dependsOn updateDockerComposeFile
	doLast {
		exec {
			if (project.hasProperty('dockerComposeArgs')) {
				commandLine 'docker-compose', 'down', dockerComposeArgs
			} else {
				commandLine 'docker-compose', 'down'
			}
		}
	}
}

task dockerCompose() {
	dependsOn updateDockerComposeFile
	doLast {
		if (project.hasProperty('dockerComposeArgs')) {
			def commandToExecute = ['docker-compose']
			commandToExecute.addAll(dockerComposeArgs.split())
			exec {
				commandLine(commandToExecute)
			}
		} else {
			throw new InvalidUserDataException('You must provide dockerComposeArgs property, e.g: `./gradlew dockerCompose -PdockerComposeArgs="-d"`')
		}
	}
}
